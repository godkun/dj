// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`test enum service 1`] = `
"/**
 * auto generated by dubbo dj
 * ~~~ 💗 machine coding 💗 ~~~
 */

import Color from '../enum/Color'
import EnumService from './base/EnumService'

export default class EnumServiceImpl extends EnumService {
  sayHello(color: Color): Color {
    throw new Error('Method not implemented.')
  }
}
"
`;

exports[`test generic service 1`] = `
"/**
 * auto generated by dubbo dj
 * ~~~ 💗 machine coding 💗 ~~~
 */

import IUser from '../../domain/User'
import Color from '../../enum/Color'

export default abstract class GenService {
  dubboInterface = 'org.apache.dubbo.service.GenService'
  group = 'dubbo'
  version = '1.0.0'

  abstract sayHello(name: Array<string>): void
  abstract sayWorld(user: Array<IUser>, color: Color): Map<string, IUser>
}
"
`;

exports[`test user service 1`] = `
"/**
 * auto generated by dubbo dj
 * ~~~ 💗 machine coding 💗 ~~~
 */

import IUser from '../domain/User'
import UserService from './base/UserService'

/**
 * 用户服务
 */

export default class UserServiceImpl extends UserService {
  sayHello(name: string, user: IUser, users: Array<IUser>): string {
    throw new Error('Method not implemented.')
  }

  sayWorld(name: string, user: IUser, users: Array<IUser>): IUser {
    throw new Error('Method not implemented.')
  }
}
"
`;

exports[`test user service 2`] = `
"/**
 * auto generated by dubbo dj
 * ~~~ 💗 machine coding 💗 ~~~
 */

import IUser from '../../domain/User'

/**
 * 用户服务
 */

export default abstract class UserService {
  dubboInterface = 'org.apache.dubbo.service.UserService'
  group = 'dubbo'
  version = '1.0.0'

  abstract sayHello(name: string, user: IUser, users: Array<IUser>): string
  abstract sayWorld(name: string, user: IUser, users: Array<IUser>): IUser
}
"
`;

exports[`test user service 3`] = `
"/**
 * auto generated by dubbo dj
 * ~~~ 💗 machine coding 💗 ~~~
 */

import { Dubbo, TDubboCallResult } from 'apache-dubbo-js'
import { argumentMap } from 'interpret-util'
import IUser from '../../domain/User'

export interface IUserService {
  sayHello(
    name: string,
    user: IUser,
    users: Array<IUser>
  ): TDubboCallResult<string>

  sayWorld(
    name: string,
    user: IUser,
    users: Array<IUser>
  ): TDubboCallResult<IUser>
}

export const UserServiceWrapper = {
  sayHello: argumentMap,
  sayWorld: argumentMap,
}

/**
 * 用户服务
 */

export function UserService(dubbo: Dubbo): IUserService {
  return dubbo.proxyService<IUserService>({
    dubboInterface: 'org.apache.dubbo.service.UserService',
    methods: UserServiceWrapper,
  })
}
"
`;
