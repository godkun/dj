// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`test enum 1`] = `
"/**
 * auto generated by dubbo dj
 * ~~~ 💗 machine coding 💗 ~~~
 */

/**
 * 颜色类型的枚举
 */

export enum Color {
  RED = 0,
  GREEN = 1,
  BLUE = 2,
}
"
`;

exports[`test enum service 1`] = `
"/**
 * auto generated by dubbo dj
 * ~~~ 💗 machine coding 💗 ~~~
 */

import Color from '../enum/Color'
import EnumService from './base/EnumService'

export default class EnumServiceImpl extends EnumService {
  dubboInterface = 'org.apache.dubbo.service.EnumService'
  group = 'dubbo'
  version = '1.0.0'

  sayHello(color: Color): Color {
    throw new Error('Method not implemented.')
  }
}
"
`;

exports[`test generic service 1`] = `
"/**
 * auto generated by dubbo dj
 * ~~~ 💗 machine coding 💗 ~~~
 */

import IUser from '../../domain/User'

export default abstract class GenService {
  dubboInterface = 'org.apache.dubbo.service.GenService'
  group = 'dubbo'
  version = '1.0.0'

  abstract sayHello(name: Array<string>): void
  abstract sayWorld(user: Array<IUser>): void
}
"
`;

exports[`test user entity 1`] = `
"/**
 * auto generated by dubbo dj
 * ~~~ 💗 machine coding 💗 ~~~
 */

import java from 'js-to-java'
import Color from '../enum/Color'

export interface IUser {
  /**
   * 用户id
   */
  id: number

  /**
   * 用户名
   */
  name: string
  color: Color
}

/**
 * 用户模块
 */

export default class User {
  /**
   * 用户id
   */
  id: number

  /**
   * 用户名
   */
  name: string
  color: Color

  constructor(props: IUser) {
    this.id = props.id
    this.name = props.name
    this.color = props.color
  }

  __fields2java() {
    java('org.apache.dubbo.domain.User', {
      id: java.Integer(this.id),
      name: java.String(this.name),
      color: java.enum('org.apache.dubbo.enum.Color', Color[this.color]),
    })
  }
}
"
`;

exports[`test user service 1`] = `
"/**
 * auto generated by dubbo dj
 * ~~~ 💗 machine coding 💗 ~~~
 */

import UserService from './base/UserService'

/**
 * 用户服务
 */

export default class UserServiceImpl extends UserService {
  dubboInterface = 'org.apache.dubbo.service.UserService'
  group = 'dubbo'
  version = '1.0.0'

  sayHello(name: string): string {
    throw new Error('Method not implemented.')
  }
}
"
`;

exports[`test user service 2`] = `
"/**
 * auto generated by dubbo dj
 * ~~~ 💗 machine coding 💗 ~~~
 */

/**
 * 用户服务
 */

export default abstract class UserService {
  dubboInterface = 'org.apache.dubbo.service.UserService'
  group = 'dubbo'
  version = '1.0.0'

  abstract sayHello(name: string): string
}
"
`;

exports[`test user service 3`] = `
"/**
 * auto generated by dubbo dj
 * ~~~ 💗 machine coding 💗 ~~~
 */

import { Dubbo, TDubboCallResult } from 'apache-dubbo-js'
import { argumentMap } from 'interpret-util'

export interface IUserService {
  sayHello(name: string): TDubboCallResult<string>
}

export const UserServiceWrapper = { sayHello: argumentMap }

/**
 * 用户服务
 */

export function UserService(dubbo: Dubbo): IUserService {
  return dubbo.proxyService<IUserService>({
    dubboInterface: 'org.apache.dubbo.service.UserService',
    methods: UserServiceWrapper,
  })
}
"
`;
